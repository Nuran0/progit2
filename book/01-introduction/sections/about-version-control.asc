=== About Version Control

(((Versiyaya nəzarət haqqında)))
"Versiya nəzarəti" nədir, və ona niyə diqqət etməliyik?
Versiya nəzarət sistemi fayla və ya fayllar qrupuna bütün vaxt ərzində edilən dəyişiklikləri qeydə alır. Buna görə də sonradan siz istədiyiniz versiyaya arxaya qayıda bilirsiniz. 
Bu kitabdakı nümunələr üçün, versiyalarına nəzarət edilən fayllar olaraq bir proqramın qaynaq kodlarını istifadə edəcəksiniz ki bu da reallıqda sizə komputerdəki istənilən fayl üzərində eyni əməliyyatları etməyə imkan verəcək.

Qrafik və ya veb dizaynersinizsə və şəkilin və ya layoutun hər bir versiyasını saxlamaq istəyirsinizsə(hansı ki, böyük ehtimalla istəyəcəksiniz), bir versiya nəzarət sistemi (VNS) istifadə etmək üçün çox ağıllı seçimdir.
O sizə seçilmiş faylları əvvəlki vəziyyətinə qaytarmağa, bütün proyekti əvvəlki vəziyyətinə geri qaytarmağa, vaxt ərzində edilmiş dəyişiklikləri müqayisə etməyə, kimin etdiyi sonuncu dəyişikliyin sistemdəki problemə səbəb olduğuna, kimin problemi nə vaxt təqdim etdiyinə və daha çoxuna imkan yaradır.
VNS-dən istifadə ümumilikdə, hər şey tərs getdiyində və ya faylları itirdiyinizdə asanlıqla bərpa edə biləcəyiniz mənasına gəlir.
Əlavə olaraq, bütün bunları çox kiçik səy ilə edirsiniz.

==== Local Version Control Systems

(((Lokal versiyaya nəzarət sistemi)))
Bir çox insanın versiyaya nəzarət metodu faylları digər qovluğa atmaqdır (əgər ağıllıdırlarsa, üzərində vaxt yazılı bir qovluğa).
Bu metod çox sadə olduğu üçün çox görülür, ancaq bu metod həm də inanılmaz dərəcədə səhvə meyillidir.
Hansı qovluğun içində olduğunuzu unutmaq və istəmədyiniz fayla səhv şeyi yazmaq vəya digər fayllara kopyalamaq çox sadədir.


Bu problemi aradan qaldırmaq məqsədi ilə proqramistlər uzun zama öncə sadə verilənlər bazasına sahib olan  VNS-ləri proqramlaşdırdılar ki fayllara edilən bütün dəyişiklikləri nəzarət altında saxlamaq mümkün olsunlar.

.Local version control.
image::images/local.png[Local version control diagram]

VNZ alətlərindən ən məhşurlarından biri RCS adlanırdı. O bu gün də bir çox komputerdə yayılmışdır.
https://www.gnu.org/software/rcs/[RCS] works by keeping patch sets (that is, the differences between files) in a special format on disk; it can then re-create what any file looked like at any point in time by adding up all the patches.

==== Centralized Version Control Systems

(((version control,centralized)))
The next major issue that people encounter is that they need to collaborate with developers on other systems.
To deal with this problem, Centralized Version Control Systems (CVCSs) were developed.
These systems (such as CVS, Subversion, and Perforce) have a single server that contains all the versioned files, and a number of clients that check out files from that central place. (((CVS)))(((Subversion)))(((Perforce)))
For many years, this has been the standard for version control.

.Centralized version control.
image::images/centralized.png[Centralized version control diagram]

This setup offers many advantages, especially over local VCSs.
For example, everyone knows to a certain degree what everyone else on the project is doing.
Administrators have fine-grained control over who can do what, and it's far easier to administer a CVCS than it is to deal with local databases on every client.

However, this setup also has some serious downsides.
The most obvious is the single point of failure that the centralized server represents.
If that server goes down for an hour, then during that hour nobody can collaborate at all or save versioned changes to anything they're working on.
If the hard disk the central database is on becomes corrupted, and proper backups haven't been kept, you lose absolutely everything -- the entire history of the project except whatever single snapshots people happen to have on their local machines.
Local VCS systems suffer from this same problem -- whenever you have the entire history of the project in a single place, you risk losing everything.

==== Distributed Version Control Systems

(((version control,distributed)))
This is where Distributed Version Control Systems (DVCSs) step in.
In a DVCS (such as Git, Mercurial, Bazaar or Darcs), clients don't just check out the latest snapshot of the files; rather, they fully mirror the repository, including its full history.
Thus, if any server dies, and these systems were collaborating via that server, any of the client repositories can be copied back up to the server to restore it.
Every clone is really a full backup of all the data.

.Distributed version control.
image::images/distributed.png[Distributed version control diagram]

Furthermore, many of these systems deal pretty well with having several remote repositories they can work with, so you can collaborate with different groups of people in different ways simultaneously within the same project.
This allows you to set up several types of workflows that aren't possible in centralized systems, such as hierarchical models.
