[[_first_time]]
=== İlk Git quraşdırması

Sisteminizdə artıq Git olduğuna görə, öz Git mühitinizi özəlləşdirmək üçünü bir neçə şey etmək istəyəcəksiniz.
Verilmiş komputerdə bunları sadəcə bir dəfə etməlisiniz; onlar yenilənmələrə baxmayaraq özlərini qoruyacaqlar.
Siz həm də əmrləri yenidən işlətməklə onları istədiyiniz zaman dəyişdirə bilərsiniz.

Git, `git config` adlanan alət ilə yüklənir ki, bu da Gitin bütün işləmə aspektlərini idarə edən konfiqurasiya dəyişənlərini almağa və təyin etməyə imkan verir. (((git commands, config)))
Bu dəyişənlər üç fərqli yerdə saxlanıla bilərlər:


1. `/etc/gitconfig` faylı: Sistemdəki hər istifadəçiyə və onların sahib olduğu bütün anbarlara tətbiq olunan dəyərləri özündə saxlayır.
  Əgər `--system` seçimini `git config`-ə yazsanız, o xüsusi olaraq bu fayla oxuyub yazacaqdır.
   Sistem konfiqurasiya faylı olduğuna görə, siz onu dəyidirmək üçün administrator və ya superuser səlahiyyətlərinə sahib olmalısınız. 
2. `~/.gitconfig` or `~/.config/git/config` faylı: Spesifik olaraq sizin istifadəçinizə uyğun olan dəyərləri saxlayan fayldır.
  `--global` seçimini əlavə edərək, Git-in bu fayl üzərinə yazmasını və oxumasına yön verə bilərsiniz və sistem üzərində işlədiyiniz _bütün_ anbarları əhatə edəcək.
3. Hansı anbarı işlətməyinizdən asılı olmayaraq Git qovluğundaki `config` faylı (`.git/config`)  xüsusi olaraq həmin anbara aiddir.
  Siz Git-ə `--local` seçimini əlavə edərək bu fayldan oxuyub yazmasına məcbur edə bilərsiniz, ancaq fakt budur ki, susmaya görə onsuz da belədir.
  (Təəccüblü deyil ki, bu seçimin qaydasında işləməsi üçün Git anbarı içində bir yerdə olmağınız lazımdır.)
  
Hər səviyyənin dəyərləri, özündən əvvəlki səviyyənin dəyərlərinin üzərinə yazılır, beləliklə `.git/config`-dəki dəyərlər `/etc/gitconfig`-dəki dəyərləri əvəzləyir.

Windows sistemlərində Git `$HOME` qovluğunda olan (bir çoxu üçün `C:\Users\$USER`) `.gitconfig` faylını axtarır
O həmçinin hələ də `/etc/gitconfig` axtarır çünki o MSys kökü ilə bağlantılıdır,

###It also still looks for `/etc/gitconfig`, although it's relative to the MSys root, which is wherever you decide to install Git on your Windows system when you run the installer.

Əgər siz Windows üçün Git-in 2.x və ya yuxarı versiyasını işlədirsinizsə, Windows XP-də `C:\Documents and Settings\All Users\Application Data\Git\config` adresində,  Windows Vista və daha yenilərində isə `C:\ProgramData\Git\config` adresində sistem səviyyəli konfiqurasiya faylını tapa bilərsiniz.
Konfiqurasiya faylı yalnız admin tərəfindən icra olunan `git config -f <file>` əmri ilə dəyişdirilə bilər.

Bütün sazlamalarınıza və onların hardan gəldiyinə aşağıdakı komandanı icra edərək baxa bilərsiniz.

[source,console]
----
$ git config --list --show-origin
----

==== Sizin kimliyiniz

Git-i quraşdırarkən birinci etməli olduğunuz şey öz istifadəçi adınızı və email adresinizi təyin etməkdir.
Bu vacibdir çünki hər bir Git commit-i bu informasiya vasitəsiylə işləyir və siz aşağıdakıları yaratmağa başladığınız andan etibarən hər bir commitin içinə möhrlənir:

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

Təkrarlayaq, siz bunu yalnız `--global` seçimini işlədərkən bircə dəfə etməlisiniz, ona görə ki, ondan sonra Git həmişə nə etsəniz bu informasiyanı istifadə edəcək.
Əgər xüsusi bir proyekt üçün ayrı bir ad və email işlədəsi olsanız, həmin proyektin içində `--global` seçimini çağırmadan yuxarıdakı əmrləri icra edə bilərsiniz.

Qrafik interfeysli alətlərdən bir çoxu ilkin quraşdırma zamanı bunu etməyinizə kömək edəcək.

[[_editor]]
==== Sizin redaktorunuz

Öz kimliyinizi təyin etdikdən sonra, Gitin sizdən mesajda yazmağınızı istəyərkən lazım olan defolt tekst redaktorunu sazlaya bilərsiniz.

Əgər sazlanmasa, Git sistemin defolt redaktorunu istifadə edir.

Əgər Emacs kimi fərqli tekst redaktoru istifadə etmək istəyirsinizsə, aşağıdakıları edə bilərsiniz:

[source,console]
----
$ git config --global core.editor emacs
----

On a Windows system, if you want to use a different text editor, you must specify the full path to its executable file.
This can be different depending on how your editor is packaged.

In the case of Notepad++, a popular programming editor, you are likely to want to use the 32-bit version, since at the time of writing the 64-bit version doesn't support all plug-ins.
If you are on a 32-bit Windows system, or you have a 64-bit editor on a 64-bit system, you'll type something like this:

[source,console]
----
$ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"
----

[NOTE]
====
Vim, Emacs and Notepad++ are popular text editors often used by developers on Unix-based systems like Linux and macOS or a Windows system.
If you are using another editor, or a 32-bit version, please find specific instructions for how to set up your favorite editor with Git in <<C-git-commands#_core_editor>>.
====

[WARNING]
====
You may find, if you don't setup your editor like this, you get into a really confusing state when Git attempts to launch it.
An example on a Windows system may include a prematurely terminated Git operation during a Git initiated edit.
====

==== Checking Your Settings

If you want to check your configuration settings, you can use the `git config --list` command to list all the settings Git can find at that point:

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

You may see keys more than once, because Git reads the same key from different files (`/etc/gitconfig` and `~/.gitconfig`, for example).
In this case, Git uses the last value for each unique key it sees.

You can also check what Git thinks a specific key's value is by typing `git config <key>`:(((git commands, config)))

[source,console]
----
$ git config user.name
John Doe
----

[NOTE]
====
Since Git might read the same configuration variable value from more than one file, it's possible that you have an unexpected value for one of these values and you don't know why.
In cases like that, you can query Git as to the _origin_ for that value, and it will tell you which configuration file had the final say in setting that value:

[source,console]
----
$ git config --show-origin rerere.autoUpdate
file:/home/johndoe/.gitconfig	false
----
====
